// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.26;

import "./Constants.sol";
import "@src/TychoRouter.sol";
import "@src/executors/UniswapV2Executor.sol";
import "@src/executors/UniswapV3Executor.sol";
import "./mock/MockERC20.sol";
import "forge-std/console.sol";
import {WETH} from "../lib/permit2/lib/solmate/src/tokens/WETH.sol";
import {IPoolManager} from "@uniswap/v4-core/src/interfaces/IPoolManager.sol";

/**
 * @title TychoSwapExploitSetup
 * @dev Custom test setup for TychoSwapExploit that doesn't depend on TychoRouterTestSetup
 */
contract TychoRouterExploitExposed is TychoRouter {
    constructor(address _permit2, address weth) TychoRouter(_permit2, weth) {}

    function exposedSwap(
        uint256 amountIn,
        uint256 nTokens,
        bytes calldata swaps
    ) external returns (uint256) {
        return _swap(amountIn, nTokens, swaps);
    }
}

contract TychoSwapExploitSetup is Test, Constants {
    TychoRouterExploitExposed public tychoRouter;
    address public tychoRouterAddr;
    UniswapV2Executor public usv2Executor;
    UniswapV3Executor public usv3Executor;

    function setUp() public virtual {
        uint256 forkBlock = 21817316;
        vm.createSelectFork(vm.rpcUrl("mainnet"), forkBlock);

        vm.startPrank(ADMIN);
        address factoryV3 = USV3_FACTORY_ETHEREUM;
        address factoryV2 = USV2_FACTORY_ETHEREUM;

        // Initialize the router
        tychoRouter = new TychoRouterExploitExposed(PERMIT2_ADDRESS, WETH_ADDR);
        tychoRouterAddr = address(tychoRouter);

        // Grant roles
        tychoRouter.grantRole(keccak256("FUND_RESCUER_ROLE"), FUND_RESCUER);
        tychoRouter.grantRole(keccak256("FEE_SETTER_ROLE"), FEE_SETTER);
        tychoRouter.grantRole(keccak256("PAUSER_ROLE"), PAUSER);
        tychoRouter.grantRole(keccak256("UNPAUSER_ROLE"), UNPAUSER);
        tychoRouter.grantRole(
            keccak256("EXECUTOR_SETTER_ROLE"),
            EXECUTOR_SETTER
        );
        vm.stopPrank();

        // Set up executors
        usv2Executor = new UniswapV2Executor(factoryV2);
        usv3Executor = new UniswapV3Executor(factoryV3);

        vm.startPrank(EXECUTOR_SETTER);
        address[] memory executors = new address[](2);
        executors[0] = address(usv2Executor);
        executors[1] = address(usv3Executor);
        tychoRouter.setExecutors(executors);
        vm.stopPrank();
    }

    function encodePLE(
        bytes[] memory data
    ) internal pure returns (bytes memory) {
        bytes memory result = "";
        for (uint i = 0; i < data.length; i++) {
            result = abi.encodePacked(result, uint16(data[i].length), data[i]);
        }
        return result;
    }
}
